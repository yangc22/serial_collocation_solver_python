// Created by OCP.py
#include <stdio.h>
#include <float.h>
#include <math.h>
#include <stdlib.h>
#include "runtime.h"
#include "vector.h"
#include "matrix.h"
#include "lu.h"
#include "qr.h"
#include "abd.h"
#include "equations.h"
#include "newtonsmethod.h"
#include "abvpdae.h"
#include "mshootdae.h"

double _rho_ = 1.0e3;

double _mu_ = 1.0e-1;

double gamma =0.5;
void _solution_estimate(Vector _T, Matrix _Y, Matrix _Z, Vector _P) {
	int i;
	double t;
	for (i = 0; i < _T->r; i++) {
		t = _T->e[i];
		_Y->e[i][0] = 18*t - 9;
		_Y->e[i][1] = 0;
		_Y->e[i][2] = -1.5;
		_Z->e[i][0] = 0.001;
	}
	if (_P != NULL) {
		for (i = 0; i < _P->r; i++) {
			_P->e[0] = 0;
		}
	}
}

void _abvp_f(Vector _y, Vector _z, Vector _p, Vector _f) {
	double x = _y->e[0];
	double y = _y->e[1];
	double theta = _y->e[2];
	double _lambda1 = _y->e[3];
	double _lambda2 = _y->e[4];
	double _lambda3 = _y->e[5];
	double _gamma1 = _y->e[6];
	double u = _z->e[0];
	double p = _p->e[0];
	_f->e[0] = (p + 18)*cos(theta);
	_f->e[1] = (p + 18)*sin(theta);
	_f->e[2] = u*(p + 18);
	_f->e[3] = 0;
	_f->e[4] = 0;
	_f->e[5] = _lambda1*(p + 18)*sin(theta) - _lambda2*(p + 18)*cos(theta);
	_f->e[6] = _lambda1*cos(theta) + _lambda2*sin(theta) + _lambda3*u + gamma*pow(u, 2) + 1;
}

void _abvp_g(Vector _y, Vector _z, Vector _p, Vector _g) {
	double x = _y->e[0];
	double y = _y->e[1];
	double theta = _y->e[2];
	double _lambda1 = _y->e[3];
	double _lambda2 = _y->e[4];
	double _lambda3 = _y->e[5];
	double _gamma1 = _y->e[6];
	double u = _z->e[0];
	double p = _p->e[0];
	_g->e[0] = _lambda3*(p + 18) + 2*gamma*u*(p + 18);
}

void _abvp_r(Vector _y0, Vector _y1, Vector _p, Vector _r) {
	double p = _p->e[0];
	double _kappa_i1 = _p->e[1];
	double _kappa_i2 = _p->e[2];
	double _kappa_i3 = _p->e[3];
	double _kappa_f1 = _p->e[4];
	double _kappa_f2 = _p->e[5];
	double _kappa_f3 = _p->e[6];
	double x = _y0->e[0];
	double y = _y0->e[1];
	double theta = _y0->e[2];
	double _lambda1 = _y0->e[3];
	double _lambda2 = _y0->e[4];
	double _lambda3 = _y0->e[5];
	double _gamma1 = _y0->e[6];
	// initial conditions
	_r->e[0] = x + 9;
	_r->e[1] = y;
	_r->e[2] = theta;
	_r->e[3] = _kappa_i1 + _lambda1;
	_r->e[4] = _kappa_i2 + _lambda2;
	_r->e[5] = _kappa_i3 + _lambda3;
	_r->e[6] = _gamma1;
	// final conditions
	x = _y1->e[0];
	y = _y1->e[1];
	theta = _y1->e[2];
	_lambda1 = _y1->e[3];
	_lambda2 = _y1->e[4];
	_lambda3 = _y1->e[5];
	_gamma1 = _y1->e[6];
	_r->e[7] = x - 9;
	_r->e[8] = y;
	_r->e[9] = theta;
	_r->e[10] = -_kappa_f1 + _lambda1;
	_r->e[11] = -_kappa_f2 + _lambda2;
	_r->e[12] = -_kappa_f3 + _lambda3;
	_r->e[13] = _gamma1;
}

void _abvp_Df(Vector _y, Vector _z, Vector _p, Matrix _Df) {
	double x = _y->e[0];
	double y = _y->e[1];
	double theta = _y->e[2];
	double _lambda1 = _y->e[3];
	double _lambda2 = _y->e[4];
	double _lambda3 = _y->e[5];
	double _gamma1 = _y->e[6];
	double u = _z->e[0];
	double p = _p->e[0];
	_Df->e[0][2] = -(p + 18)*sin(theta);
	_Df->e[0][8] = cos(theta);
	_Df->e[1][2] = (p + 18)*cos(theta);
	_Df->e[1][8] = sin(theta);
	_Df->e[2][7] = p + 18;
	_Df->e[2][8] = u;
	_Df->e[5][2] = _lambda1*(p + 18)*cos(theta) + _lambda2*(p + 18)*sin(theta);
	_Df->e[5][3] = (p + 18)*sin(theta);
	_Df->e[5][4] = -(p + 18)*cos(theta);
	_Df->e[5][8] = _lambda1*sin(theta) - _lambda2*cos(theta);
	_Df->e[6][2] = -_lambda1*sin(theta) + _lambda2*cos(theta);
	_Df->e[6][3] = cos(theta);
	_Df->e[6][4] = sin(theta);
	_Df->e[6][5] = u;
	_Df->e[6][7] = _lambda3 + 2*gamma*u;
}

void _abvp_Dg(Vector _y, Vector _z, Vector _p, Matrix _Dg) {
	double x = _y->e[0];
	double y = _y->e[1];
	double theta = _y->e[2];
	double _lambda1 = _y->e[3];
	double _lambda2 = _y->e[4];
	double _lambda3 = _y->e[5];
	double _gamma1 = _y->e[6];
	double u = _z->e[0];
	double p = _p->e[0];
	_Dg->e[0][5] = p + 18;
	_Dg->e[0][7] = 2*gamma*(p + 18);
	_Dg->e[0][8] = _lambda3 + 2*gamma*u;
}

void _abvp_Dr(Vector _y0, Vector _y1, Vector _p, Matrix _Dr) {
	double p = _p->e[0];
	double _kappa_i1 = _p->e[1];
	double _kappa_i2 = _p->e[2];
	double _kappa_i3 = _p->e[3];
	double _kappa_f1 = _p->e[4];
	double _kappa_f2 = _p->e[5];
	double _kappa_f3 = _p->e[6];
	double x = _y0->e[0];
	double y = _y0->e[1];
	double theta = _y0->e[2];
	double _lambda1 = _y0->e[3];
	double _lambda2 = _y0->e[4];
	double _lambda3 = _y0->e[5];
	double _gamma1 = _y0->e[6];
	// initial conditions
	_Dr->e[0][0] = 1;
	_Dr->e[1][1] = 1;
	_Dr->e[2][2] = 1;
	_Dr->e[3][3] = 1;
	_Dr->e[3][15] = 1;
	_Dr->e[4][4] = 1;
	_Dr->e[4][16] = 1;
	_Dr->e[5][5] = 1;
	_Dr->e[5][17] = 1;
	_Dr->e[6][6] = 1;
	// final conditions
	x = _y1->e[0];
	y = _y1->e[1];
	theta = _y1->e[2];
	_lambda1 = _y1->e[3];
	_lambda2 = _y1->e[4];
	_lambda3 = _y1->e[5];
	_gamma1 = _y1->e[6];
	_Dr->e[7][7] = 1;
	_Dr->e[8][8] = 1;
	_Dr->e[9][9] = 1;
	_Dr->e[10][10] = 1;
	_Dr->e[10][18] = -1;
	_Dr->e[11][11] = 1;
	_Dr->e[11][19] = -1;
	_Dr->e[12][12] = 1;
	_Dr->e[12][20] = -1;
	_Dr->e[13][13] = 1;
}

int main() {
	int _ny = 7;
	int _nz = 1;
	int _np = 7;
	int _ninequality = 0;
	ABVPDAE _bvp = ABVPDAENew(_ny, _nz, _np, _ninequality);
	_bvp->f = _abvp_f;
	_bvp->g = _abvp_g;
	_bvp->r = _abvp_r;
	_bvp->Df = _abvp_Df;
	_bvp->Dg = _abvp_Dg;
	_bvp->Dr = _abvp_Dr;
	MSHOOTDAE _m = MSHOOTDAENew();
	_m->bvp = _bvp;
	_m->tolerance = 1e-06;
	_m->maximum_nodes = 1000;
	_m->maximum_newton_iterations = 200;
	_m->maximum_mesh_refinements = 10;
	_m->display = 0;
	int _N = 101;
	double _t_initial = 0;
	double _t_final = 1;
	Vector _T0 = VectorLinspace(_t_initial, _t_final, _N);
	Matrix _Y0 = MatrixNew(_N, _ny);
	Matrix _Z0 = MatrixNew(_N, _nz);
	Vector _P0 = VectorNew(_np);
	MatrixSetAllTo(_Y0, 1.0);
	MatrixSetAllTo(_Z0, 1.0);
	VectorSetAllTo(_P0, 1.0);
	_solution_estimate(_T0, _Y0, _Z0, _P0);
	int _err = MSHOOTDAESolve(_m, _T0, _Y0, _Z0, _P0);
	printf("MSHOOTDAESolve exit code: %d\n", _err);
	_err = MSHOOTDAEWriteData(_m, "ex203.data");
	ABVPDAEDelete(_bvp);
	MSHOOTDAEDelete(_m);
	VectorDelete(_T0);
	MatrixDelete(_Y0);
	MatrixDelete(_Z0);
	VectorDelete(_P0);
	return _err;
}

/*

# Homotopy Algorithm for Optimal Control Problems
# with a Second-order State Constraint
# Audrey Hermant
# Appl Math Optim (2010) 61: 85â€“127

Constants               = [gamma = 0.5];
ParameterVariables      = [p];
StateVariables          = [x, y, theta];
ControlVariables        = [u];

InitialConstraints      = [x + 9, y, theta];
TerminalConstraints     = [x - 9, y, theta];

CostFunctional          = (p + 18)*(1 + gamma*u*u);

DifferentialEquations   = [(p + 18)*cos(theta), (p + 18)*sin(theta), (p + 18)*u];

StateVariableInequalityConstraints = [10*cos(0.2*x) - 0.002*x*x*x*x*sin(x-1.25) - y];

Nodes                   = 101;
Tolerance               = 1.0e-6;

StateEstimate           = [18*t-9, 0, -1.5];
ControlEstimate         = [0.001];
ParameterEstimate       = [0];

OutputFile              = "ex203.data";

*/

